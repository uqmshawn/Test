"""add_bms_and_multiplus

Revision ID: d06744099a67
Revises: 90eed4df6283
Create Date: 2025-05-14 10:49:50.536005

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d06744099a67"
down_revision: Union[str, None] = "90eed4df6283"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "bms_data",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("volts", sa.Float(precision=6), nullable=False),
        sa.Column("amps", sa.Float(precision=6), nullable=False),
        sa.Column("watts", sa.Float(precision=6), nullable=False),
        sa.Column("remaining_ah", sa.Float(precision=6), nullable=False),
        sa.Column("full_ah", sa.Float(precision=6), nullable=False),
        sa.Column("charging", sa.Boolean(), nullable=False),
        sa.Column("temperature", sa.Float(precision=6), nullable=False),
        sa.Column("state_of_charge", sa.Float(precision=6), nullable=False),
        sa.Column("state_of_health", sa.Float(precision=6), nullable=False),
        sa.Column("integer_soc", sa.Integer(), nullable=True),
        sa.Column("payload", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_bms_data_timestamp", "bms_data", ["timestamp"], unique=False)
    op.create_index(
        op.f("ix_bms_data_timestamp"), "bms_data", ["timestamp"], unique=False
    )
    op.create_table(
        "multiplus_data",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("volts_in", sa.Float(precision=6), nullable=False),
        sa.Column("amps_in", sa.Float(precision=6), nullable=False),
        sa.Column("watts_in", sa.Float(precision=6), nullable=False),
        sa.Column("freq_in", sa.Float(precision=6), nullable=False),
        sa.Column("volts_out", sa.Float(precision=6), nullable=False),
        sa.Column("amps_out", sa.Float(precision=6), nullable=False),
        sa.Column("watts_out", sa.Float(precision=6), nullable=False),
        sa.Column("freq_out", sa.Float(precision=6), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_multiplus_data_timestamp", "multiplus_data", ["timestamp"], unique=False
    )
    op.create_index(
        op.f("ix_multiplus_data_timestamp"),
        "multiplus_data",
        ["timestamp"],
        unique=False,
    )
    op.alter_column(
        "gps_data",
        "latitude",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=9),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "longitude",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=9),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "altitude",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=6),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "speed",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=6),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "heading",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=6),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "pdop",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=4),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "hdop",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=4),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "vdop",
        existing_type=sa.REAL(),
        type_=sa.Float(precision=4),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "gps_data",
        "vdop",
        existing_type=sa.Float(precision=4),
        type_=sa.REAL(),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "hdop",
        existing_type=sa.Float(precision=4),
        type_=sa.REAL(),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "pdop",
        existing_type=sa.Float(precision=4),
        type_=sa.REAL(),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "heading",
        existing_type=sa.Float(precision=6),
        type_=sa.REAL(),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "speed",
        existing_type=sa.Float(precision=6),
        type_=sa.REAL(),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "altitude",
        existing_type=sa.Float(precision=6),
        type_=sa.REAL(),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "longitude",
        existing_type=sa.Float(precision=9),
        type_=sa.REAL(),
        existing_nullable=False,
    )
    op.alter_column(
        "gps_data",
        "latitude",
        existing_type=sa.Float(precision=9),
        type_=sa.REAL(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_multiplus_data_timestamp"), table_name="multiplus_data")
    op.drop_index("idx_multiplus_data_timestamp", table_name="multiplus_data")
    op.drop_table("multiplus_data")
    op.drop_index(op.f("ix_bms_data_timestamp"), table_name="bms_data")
    op.drop_index("idx_bms_data_timestamp", table_name="bms_data")
    op.drop_table("bms_data")
    # ### end Alembic commands ###
